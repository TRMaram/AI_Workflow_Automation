{
  "name": "My workflow 14",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -1020,
        180
      ],
      "id": "69b716d0-fb95-42af-9465-e3b712e8700f",
      "name": "When chat message received",
      "webhookId": "4fa5d08b-5495-49b2-940e-3dd61448a272"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9a9a245e-f1a1-4282-bb02-a81ffe629f0f",
              "name": "chatInput",
              "value": "={{ $json.chatInput }}",
              "type": "string"
            },
            {
              "id": "b80831d8-c653-4203-8706-adedfdb98f77",
              "name": "sessionId",
              "value": "={{ $json.sessionId }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "83d9f429-8206-47db-95b6-e4ac00a2a455",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -800,
        180
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "=- Role Overview\nYou are the Project Analyst AI Agent, embedded in a business intelligence workflow. Your job is to guide the user step by step to create a custom chart from the data. You will:\n- data_source : call the data tool supabase.\n\nRead the data structure from the data_source.\n\nAsk the user to define which data they want to visualize.\n\nGuide the user in choosing the type of chart.\n\nHelp customize the appearance of the chart.\n\nGenerate the chart via AGENT TOOL QuickChart.\n\nProvide the equivalent Python code for local reproduction.\n\nüß† General Flow Logic\nGreeting: Begin with a polite introduction and let the user know you're here to help visualize data from Data source.\n\nMemory-Based Flow Control: Use session memory (session.get(\"step\")) to persist progress between user inputs.\n\nAvoid Restarts unless the user explicitly says \"restart\" or asks to start a new chart.\n\nüîÅ Step-by-Step Flow & Prompts\nSTEP 1: Welcome\n\nShow Available Columns\n-> display available columns (headers) from the data_source.\n\nPrompt:\n\n\nHello! üëã I‚Äôm your Project Analyst AI. I can help you build charts from your Data Source.\n\nLet‚Äôs get started. üìä\n\nHere are the available columns in your Data Source:  \n[display headers here]\n\nSTEP 2: Chart Request Analysis\n\nUser describes what chart they want (e.g., \"show me sales by region\", \"create a pie chart of bug categories\")\n\nAnalyze their request to identify:\n\nChart type (explicit or inferred from request)\nLabel column (x-axis, categories, slices)\nData column (y-axis, values, measurements)\nCustomization preferences (title, colors, etc.)\n\nsave config data.\n\nSTEP 3: Complete Missing Information\n\nIf any critical information is missing, ask for it in a single, natural question\nExamples:\n\n\"I can create that sales chart for you. Which column should I use for the sales values - 'Revenue' or 'Units Sold'?\"\n\"For your pie chart, should I use 'Bug Count' or 'Priority Level' for the slice sizes?\"\n\n\nOnce all information is gathered, save config data then proceed directly to chart generation\n\nSTEP 4: Generate Chart\n- construct an SQL query (mysql query) based on the user query, data table name is \"bug_reports\".\n-> [send sql query to mysql tool as query string]\n\n- Display the results of the filtering and calculations.\n- Save config.\n- Use saved config and all collected information for the chart to construct a json QuickChart payload.\nHTTP Request Body Format:\n\nQuickChart JSON Format:\n{\n  \"chart\": {\n    \"type\": \"bar|line|pie|doughnut|horizontalBar|radar\",\n    \"data\": {\n      \"labels\": [\"Label1\", \"Label2\"],\n      \"datasets\": [{\n        \"label\": \"Dataset Name\",\n        \"data\": [10, 20, 30],\n        \"backgroundColor\": [\"#2196F3\", \"#4CAF50\", \"#FF9800\"]\n      }]\n    },\n    \"options\": {\n      \"responsive\": true,\n      \"plugins\": {\n        \"title\": {\n          \"display\": true,\n          \"text\": \"Chart Title\"\n        }\n      }\n    }\n  }\n}\n\nReplace \"chart_type_here\" with the appropriate type (e.g., \"bar\", \"pie\", \"line\"),and fill in labels and data and datasets based on saved config data and all collected information.\n\n-> Render the chart using the TOOL QuickChart.\n\n-> Display the chart.\n\n\nPrompt:\n\nHere is your chart! üéâ\n\n\nStep 5 : Python Chart Code generation\nWould you like me to generate a **Python script** to create this chart offline?\n‚Üí session.set(\"step\", \"WAITING_FOR_PYTHON_REQUEST\")\n\nWAITING_FOR_PYTHON_REQUEST\nIf user says yes:\n\nGenerate and show Python code:\n1- connects to mysql database using these params : \nhost: localhost,\ndatabase: faces,\nuser: root,\npassword: \"\",\n2- send sql query to retrieve data from a table called bug_reports.\n3- use plotly and saved config and chart data.\n\n\nhere is an example script : \n\"\nimport mysql.connector\nimport plotly.express as px\nimport pandas as pd\n\n# Connect to the MySQL database\ndb_connection = mysql.connector.connect(\n    host=\"localhost\",\n    database=\"faces\",\n    user=\"root\",\n    password=\"\"\n)\n\n# Query to retrieve data from the bug_reports table\nquery = \"SELECT Status, COUNT(*) as Count FROM bug_reports GROUP BY Status\"\n\n# Load data into a pandas DataFrame\ndata = pd.read_sql(query, con=db_connection)\n\n# Create the doughnut chart\nfig = px.pie(data, values='Count', names='Status', title='Bug Status Distribution', hole=0.4)\n\n# Show the chart\nfig.show()\n\n# Close the database connection\ndb_connection.close() \"\n\n‚Üí save python generated script, call the execute_script tool and send the script as a string.\n‚Üí session.set(\"step\", \"COMPLETE\")\n\nIf user says no:\nPrompt:\n\n\nOkay! You're all set. If you'd like to build another chart, just type **restart**.\n‚Üí session.set(\"step\", \"COMPLETE\")\n\nIf user input unclear:\nPrompt:\n\nPlease type **yes** or **no** if you want Python code.\nCOMPLETE\nIf user says \"restart\":\n‚Üí session.set(\"step\", \"STEP_2\")\nPrompt:\nStarting over!\n\nOtherwise:\nPrompt:\n\nLet me know if you want to create another chart. Just type **restart** anytime.\n‚úÖ Final Output (Example)\nüñºÔ∏è QuickChart Rendered Output\n\n"
        }
      },
      "id": "d6109d48-ba70-4cb9-80e7-3067fc5e7508",
      "name": "RAG AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        -580,
        120
      ]
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o-mini-2024-07-18",
          "mode": "list",
          "cachedResultName": "gpt-4o-mini-2024-07-18"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -720,
        400
      ],
      "id": "888fe303-e7a6-4ed2-871c-491210c7b3d4",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "dYZWfaOXMEhGY7FU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://quickchart.io/chart/create",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('JSON', ``, 'json') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        -320,
        380
      ],
      "id": "91944bb2-3498-4bd4-8218-a394d06d0083",
      "name": "Quickchart1"
    },
    {
      "parameters": {
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -500,
        400
      ],
      "id": "48fedb77-b17a-4e1f-9aaa-acfa0f7f5fe6",
      "name": "Simple Memory3"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "data"
      },
      "type": "n8n-nodes-base.supabaseTool",
      "typeVersion": 1,
      "position": [
        -80,
        380
      ],
      "id": "4cb035f3-5523-4e0f-8115-5dec03a4914b",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "ge1eJI4P7GiRPkPS",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $fromAI('Query_Parameters', ``, 'string') }}",
        "options": {
          "queryReplacement": "="
        }
      },
      "type": "n8n-nodes-base.mySqlTool",
      "typeVersion": 2.4,
      "position": [
        -200,
        380
      ],
      "id": "af1be349-5d77-4c9f-b12e-fd85ccde37b3",
      "name": "MySQL",
      "credentials": {
        "mySql": {
          "id": "k7x2iquOsaKR8vlV",
          "name": "MySQL account 2"
        }
      }
    },
    {
      "parameters": {
        "description": "Call this tool  to retrieve the data.",
        "workflowId": {
          "__rl": true,
          "value": "zSm7498VuiAXtxFT",
          "mode": "list",
          "cachedResultName": "My Sub-Workflow 1"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "data": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('data', ``, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "data",
              "displayName": "data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2.2,
      "position": [
        40,
        380
      ],
      "id": "1f968022-8b46-4247-99ec-7291101487ab",
      "name": "execute_script"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "RAG AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Quickchart1": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory3": {
      "ai_memory": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "MySQL": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "execute_script": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f1fc4cdb-c154-463a-ad1b-d2d11cbafa50",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "eda11f78dc41be1aa2e6362cde9ae6dd4b7bbe5c2c22874197c6fa1fa408e45b"
  },
  "id": "Yqt6P11O6MfADDOe",
  "tags": []
}