{
  "name": "PMI_controle_agent_Final",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {
          "q": "has:attachment",
          "readStatus": "unread"
        },
        "options": {
          "downloadAttachments": true
        }
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -340,
        940
      ],
      "id": "a478d87f-a38a-4ce4-b2fb-c4eacde564ec",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "LVLMq9zQvphbXDM9",
          "name": "Gmail account 9"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "52a2f0d9-3137-4f6e-a2c1-8285694f6159",
              "name": "choices[0].message.content",
              "type": "string",
              "value": "=  {{ $json.text || $json.content}}"
            }
          ]
        },
        "options": {}
      },
      "id": "4c17f90e-f6a7-4c23-8111-ea0a0fa7038f",
      "name": "Get only the text",
      "type": "n8n-nodes-base.set",
      "position": [
        320,
        730
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $binary.attachment_0.mimeType }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "a26e1ff6-ac77-43e2-8cdf-34d1cd45b43a"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "b3d19f78-cc97-4287-9570-85430e65acf4",
                    "leftValue": "={{ $binary.attachment_0.mimeType }}",
                    "rightValue": "=image/",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "f88aa616-408c-4241-834d-a20015220abc",
                    "leftValue": "={{ $binary.attachment_0.mimeType }}",
                    "rightValue": "application/vnd.google-apps.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "291f2639-deb6-4ed6-aea0-09ab9e9c6cd6",
                    "leftValue": "={{ $binary.attachment_0.mimeType }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "d3fc2584-9248-4782-8408-be5e68b80da8",
                    "leftValue": "={{ $binary.attachment_0.mimeType }}",
                    "rightValue": "audio",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "allMatchingOutputs": true
        }
      },
      "id": "91b82af2-af9f-49b4-b3a3-f14ccd4bb5a6",
      "name": "Switch1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -120,
        888
      ]
    },
    {
      "parameters": {
        "numberInputs": 5
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        540,
        813
      ],
      "id": "aa1abf72-4711-4cfb-a718-7ad3abb80a5a",
      "name": "Merge"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "52a2f0d9-3137-4f6e-a2c1-8285694f6159",
              "name": "choices[0].message.content",
              "type": "string",
              "value": "={{ $json.text ||$json.data }}  "
            }
          ]
        },
        "options": {}
      },
      "id": "4f06dba8-51e6-4d0b-8a79-180ee5144425",
      "name": "Get only the text1",
      "type": "n8n-nodes-base.set",
      "position": [
        320,
        930
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "52a2f0d9-3137-4f6e-a2c1-8285694f6159",
              "name": "choices[0].message.content",
              "type": "string",
              "value": "={{ $json.text }}"
            }
          ]
        },
        "options": {}
      },
      "id": "8c1c7f13-ac8a-4a3b-855b-d26085f6b4c0",
      "name": "Get only the text2",
      "type": "n8n-nodes-base.set",
      "position": [
        320,
        530
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "text",
        "binaryPropertyName": "attachment_0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        100,
        930
      ],
      "id": "b08a1f85-5bc1-4bf8-88e7-31de51b233ff",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "attachment_0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        100,
        530
      ],
      "id": "0874d6e5-5a8c-4cbe-bbb8-cbda251ddc84",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "inputBinaryField": "attachment_0"
      },
      "type": "n8n-nodes-docx-converter.docxToText",
      "typeVersion": 1,
      "position": [
        100,
        1130
      ],
      "id": "16365aa2-df9d-4bc3-a790-915ad7ba476b",
      "name": "DOCX to Text"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "52a2f0d9-3137-4f6e-a2c1-8285694f6159",
              "name": "choices[0].message.content",
              "type": "string",
              "value": "={{ $json.text ||$json.data }}  "
            }
          ]
        },
        "options": {}
      },
      "id": "874b008e-9e82-46b8-a668-3adef7ad1d8f",
      "name": "Get only the text6",
      "type": "n8n-nodes-base.set",
      "position": [
        320,
        1130
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are ActionReview AI — a smart assistant specialized in reviewing and validating task items derived from project meeting minutes. Your role is to analyze the supervisor’s reply to a list of proposed action items, identify if any corrections are needed, and return the final validated action list — either as-is or with corrections applied.\n\n🔹 INPUTS\noriginal_actions: The list of action items extracted from the meeting. ({{ $('AI Agent2').item.json.output }})\n\nsupervisor_reply: The supervisor’s feedback. ({{ $json.data['Report Confirmed ?'] }})\n\n🔹 RULES\nAnalyze Supervisor Reply:\n\nIf the supervisor confirms the action list:\n  if the due_date is empty input {{ $today }} date as YYYY-MM-dd format then \n\nReturn original_actions.\n\nIf the supervisor requests changes:\n\nExtract corrections in this format:\n\n[\n  {\n    \"field_to_correct\": \"description\" | \"assigned_to\" | \"due_date\" | \"notes\",\n    \"original_value\": \"string\",\n    \"suggested_change\": \"string\",\n    \"reason\": \"optional string\"\n  }\n]\nApply Corrections:\n\nUpdate original_actions with the corrections.\n\nReturn the actions with the modified updated_actions.\n\n🔹 OUTPUT FORMAT\nOnly return the final actions as a json.\n{\n  \"project_name\" : \"\",\n  \"Status\":\"\",\n  \"actions\": [\n    {\"assigned_to\" : \"\",\n      \"due_date\" : \"\", #change the date format to yyyy-MM-dd\n      \"description\" : \"description\" \"assigned_to\" \"due_date\",\n      \"summaries\":\"notes\",\n      \"status\":\"\"\n    }\n  ]\n\"Scheduled meeting\": [\n\"meeting_date\":\"\",\n\"meeting_time\":\"\",\n\"meeting_subject\":\"\"\n]\n}\nNo status object. No commentary. No extra text.\nJust the final validated actions — corrected if needed, unchanged if confirmed.\n\n",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        2768,
        1305
      ],
      "id": "f26d3a1b-6e46-4515-b67c-c6cc518e04df",
      "name": "Basic LLM Chain",
      "retryOnFail": true
    },
    {
      "parameters": {
        "jsonSchemaExample": "{  \"project_name\": \"AI Automation for Backlog Creation in Project Management\", \"status\" :\"initial meeting \",\"actions\": [    {     \"description\": \"Write meeting summaries with clear task assignments for each engineer\",      \"assigned_to\": \"Sonia\",      \"due_date\": \"25/05/2025\",      \"summaries\": \"Summaries should be detailed enough for AI processing; not overly technical\"   },  {      \"description\": \"Select OCR model for information extraction\", \"status\":\"TO DO\",     \"assigned_to\": \"Maram\",      \"due_date\": \"20/05/2025\",      \"summaries\": \"Applies to processing image-based summaries\"    }],\"Scheduled_meeting\": [\n{\"meeting_date\":\"\",\n\"meeting_time\":\"\",\n\"meeting_subject\":\"\"\n}]}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        2980,
        1520
      ],
      "id": "a91572b8-1f74-4d36-9da5-e0dfb37636d3",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "\nlet originalList = $json.output.Scheduled_meeting ;\n\nreturn {originalList};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3144,
        1255
      ],
      "id": "01cdd37f-6a94-499b-a1e2-47d600a44cc6",
      "name": "Code1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "originalList",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3540,
        1160
      ],
      "id": "2d83cd13-cfdb-4b0c-82c3-51d4e0eb60d8",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=you are a scheduler IA , i want you to help add this meeting to my calender and keep in my mind that the time now is {{ $now }} and the timeZone is Central European Standard Time (GMT+1):\nmeeting_details :\nmeeting_date : {{ $json.originalList[0].meeting_date }}\nmeeting_time :  {{ $json.originalList[0].meeting_time }}\nmeeting_subject :{{ $json.originalList[0].meeting_subject }}\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        3840,
        1240
      ],
      "id": "e9b1ed88-c566-4503-99a1-b95d7d329bd9",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        3840,
        1420
      ],
      "id": "bbe3c145-4151-4f17-97d4-e10c5e5abe34",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "dYZWfaOXMEhGY7FU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "rosiemt29@gmail.com",
          "mode": "list",
          "cachedResultName": "rosiemt29@gmail.com"
        },
        "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
        "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
        "additionalFields": {
          "description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Description', ``, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        4000,
        1420
      ],
      "id": "0cbf47a2-df42-485f-afc8-879aefd6e4ff",
      "name": "Google Calendar",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "Sca1IFw2TOS3voZj",
          "name": "Google Calendar account 3"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        3392,
        900
      ],
      "id": "3d806467-5416-47ef-9a85-a746f00af859",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "dYZWfaOXMEhGY7FU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        5420,
        500
      ],
      "id": "9390c01a-47e1-4004-ad30-f137ae9b4d0b",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "dYZWfaOXMEhGY7FU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "issueKey": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Issue_Key', ``, 'string') }}",
        "updateFields": {
          "statusId": {
            "__rl": true,
            "mode": "id",
            "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Status', ``, 'string') }}",
            "__regex": "^([0-9]{1,})"
          }
        }
      },
      "type": "n8n-nodes-base.jiraTool",
      "typeVersion": 1,
      "position": [
        5540,
        560
      ],
      "id": "e9e27b78-1da6-48c1-b1a8-3b9f246f038c",
      "name": "update_issues",
      "retryOnFail": true,
      "credentials": {
        "jiraSoftwareCloudApi": {
          "id": "2N0za8xf0HFwIb5i",
          "name": "Jira SW Cloud account 3"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an AI assistant responsible for managing Jira tasks. You will update existing task statuses and create new tasks when needed.\nAvailable Tools:\n\nget_all_issues(project_id) - Retrieves all issues from the project\nupdate_issues(issue_key, status_id) - Updates an existing task status (31, 21, 11)\ncreate_issue(actions, project_id) - Creates a new Jira task/issue\n\nInput Parameters:\n\nproject_id: {{ $json.done_list?.[0]?.project_id || $json.to_do_list?.[0]?.project_id }}\ntask_list_to_do: {{ $json.to_do_list?.toJsonString() }}\ntask_list_done: {{ $json.done_list?.toJsonString() }}\ntask_list_In_progress: {{ $json.In_prog_list?.toJsonString() }}\n\nTask Processing Logic:\nStep 1: Retrieve Current Issues\n\nCall get_all_issues(project_id) to get all existing tasks\n\nStep 2: Process Each Task List\nProcess tasks from all three lists: task_list_to_do, task_list_In_progress, and task_list_done\nFor each task in each list:\nA. Check for Existing Similar Tasks\n\nCompare the task description with existing tasks\nTasks are considered similar if they have the same objective or clear content overlap\n\nB. Apply Decision Logic:\nCase 1: Similar Task Found in Jira\n\nIf task status is 21 (In Progress):\n\nCall update_issues(existing_jira_Issue_Key, 21)\nResponse: \"✅ Task {task_id} updated (status: {status_name})\"\nIf task status is  31 (Done):\n\nCall update_issues(existing_jira_Issue_Key, 31)\nResponse: \"✅ Task {task_id} updated (status: {status_name})\"\n\n\nIf task status is 11 (To Do) and Jira task exists:\n\nResponse: \"⏭️ Task already exists in Jira - no action needed\"\n\n\n\nCase 2: No Similar Task Found in Jira\n\nIf task status is 11 (To Do):\n\nCall create_issue(task_json, project_id)\nResponse: \"🆕 New task created: {description}\"\n\n\nIf task status is 21 or 31:\n\nResponse: \"⚠️ Cannot update non-existent task - task not found in Jira\"\n\n\n\nDue Date Logic:\n\nIf due_date is empty: use current date {{ $now.extract(\"year\").toString().concat(\"-\",$now.extract(\"month\").toString(),\"-\",$now.extract(\"day\").toString()) }}\nOtherwise: use provided due_date in YYYY-MM-DD format\n\nJSON Structure for Task Creation:\njson{\n  \"fields\": {\n    \"assignee\": {\n      \"id\": \"[ASSIGNEE_ID]\"\n    },\n    \"summary\": \"[TASK_DESCRIPTION]\",\n    \"duedate\": \"[YYYY-MM-DD]\",\n    \"issuetype\": {\n      \"name\": \"Task\"\n    },\n    \"project\": {\n      \"id\": \"{{ $json.done_list[0].project_id || $json.to_do_list[0].project_id }}\"\n    },\n    \"description\": {\n      \"content\": [\n        {\n          \"content\": [\n            {\n              \"text\": \"[TASK_DESCRIPTION]\",\n              \"type\": \"text\"\n            }\n          ],\n          \"type\": \"paragraph\"\n        }\n      ],\n      \"type\": \"doc\",\n      \"version\": 1\n    },\n    \"reporter\": {\n      \"id\": \"712020:5c0f38f5-a7d2-444d-ba9f-b8c9bcbfc4c1\"\n    }\n  }\n}\nAssignee ID Mapping:\n\nSonia: \"615717bc9cdb9300724883d3\"\nMaram: \"712020:2252e3e4-1471-49e6-8bd2-00914e2036eb\"\nIheb: \"712020:90c222f1-6437-463b-ae70-9f3fc75d6cb6\"\n\nStatus Code Reference:\njson{\n  \"To Do\": \"11\",\n  \"In Progress\": \"21\", \n  \"Done\": \"31\"\n}\nProcessing Rules:\n\nCREATE: Call create_issue() when a task has status 11 (To Do) AND no similar task exists in Jira\nUPDATE: Call update_issues() when a task has status 21 (In Progress) or 31 (Done) AND a similar task exists in Jira\nSKIP: No action needed when a To Do task already exists in Jira\n\nProcessing Order:\n\nProcess task_list_to_do (status 11)\nProcess task_list_In_progress (status 21)\nProcess task_list_done (status 31)\n\nResponse Format:\n\nNew task created: \"🆕 New task created: {description}\"\nTask updated: \"✅ Task {task_id} updated (status: {status_name})\"\nTask already exists: \"⏭️ Task already exists in Jira - no action needed\"\nCannot update non-existent: \"⚠️ Cannot update non-existent task - task not found in Jira\"\nNo changes needed: \"⏭️ No changes made - content is similar\"\n\nImportant Notes:\n\nAlways retrieve existing issues first before processing any task lists\nOnly process tasks with status 11 (To Do) for creation\nOnly update tasks that are In Progress (21) or Done (31)\nUse exact numeric status codes from the task lists\nEnsure all tool calls use exact parameter names and formats\nParse each task list JSON string before processing\nHandle empty task lists gracefully",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        5520,
        280
      ],
      "id": "e5387892-c235-4fd2-b733-1638192303b3",
      "name": "follow_up_report",
      "executeOnce": false,
      "retryOnFail": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are JiraSync AI — an intelligent agent responsible for creating projects and creating and syncing task items into Jira.\n\nACTION:\nUse only the following tools:\n* create_project(project_name:string) // Creates a new Jira project\n\nCall it using:\n\n{\n  \"prject_name\":{{ $json.output.project_name }}\n  \"actions\":{{ $json.output.actions.toJsonString() }} ,\n}\nReturn only a clean JSON output confirming success or failure.\n\n🧠 AI Agent Logic: Project and Jira Issue Creation\n1- Create the Project\n\n   - Call: create_project(project_name)\n\n    - Capture the returned project id from the output of the create_project jira node .\n\n    - Ensure id is valid before proceeding.\n\n2- make sur the output is in plain json",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        3640,
        720
      ],
      "id": "a13911aa-671c-43eb-ad47-95c154ff8ac9",
      "name": "initial_report"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "202ad09e-3571-48a9-a272-3a8d6f1f30fd",
              "leftValue": "={{ $json.output.status.toLowerCase() }}",
              "rightValue": "intermediary",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3180,
        600
      ],
      "id": "3f00e9ee-d505-46f8-9d0a-715e010a040d",
      "name": "If"
    },
    {
      "parameters": {
        "content": "# JIRA TASKS CREATION AND UPDATE STATUS AND MEETING SET UP IN CALENDAR",
        "height": 560,
        "width": 2620
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3380,
        120
      ],
      "typeVersion": 1,
      "id": "f24d70ae-cefd-429e-b37e-bf61468a7719",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "",
        "height": 420,
        "width": 1760,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3380,
        700
      ],
      "typeVersion": 1,
      "id": "d20e2236-a54b-49af-b1a6-a31d0f073b63",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "",
        "height": 420,
        "width": 1040,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3380,
        1140
      ],
      "typeVersion": 1,
      "id": "ceabe0d0-eaea-4a91-8fdd-83a3e4e3023e",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "#  Data Extraction from multiple sources (images,text,audio)",
        "height": 1080,
        "width": 1380,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -660,
        420
      ],
      "typeVersion": 1,
      "id": "a8569413-f6f5-4fee-bb07-42ef371c3133",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Read the following project meeting report text: {{$json.choices[0].message.content}}\n\nYour tasks are:\n\n1- Identify and extract the following fields from the meeting content:\n{\n  \"project_name\": \"\",          // The name of the project discussed\n\"project_status\":\"\" // whether this is an initial meeting report or an intermediary meeting report where taks need to be updated (must be \"initial\" or \"intermediary\" )\n  \"start_date\":\"\", // the date of the report\n  \"actions\": [                 // List of concrete actions or tasks mentioned in the text\n    {\n      \"description\": \"\",       // Brief description of the task\n      \"status\":\"\",  // TO DO or IN PROGRESS or DONE\n      \"assigned_to\": \"\",       // Person responsible for the task,it must be either Sonia, Maram or Iheb.\n      \"due_date\": \"\",          // Deadline or due date\n      \"notes\": \"\"              // Any additional information related to the task\n    }\n  ],\n  \"meeting_date\": \"\",          // The date when the meeting took place\n  \"general_notes\": \"\"          // Any general notes not linked to specific actions\n}\n2- Ensure that the output contains the json above only.\n\n3- If a task status is Completed (status completed) then write it as DONE.(task status done).\n   If a task is still ongoing and not completed (status In Progress) then write it as IN POGRESS.(task status In Progress).\n  If a task will be done in a future context (will be) (status TO DO) then write it as TO DO.(task status: TO DO).\n\n4- If a meeting is scheduled (look for explicit time/date mention or title keywords like “next meeting”), note this separately so it can be synced to Teams or Calendar.\n\n5- Keep the formatting consistent for direct Jira and Teams integration.\n\n-> make sure to extract all the tasks from the report text.",
        "options": {
          "systemMessage": "=Read the following contract text: {{$json.choices[0].message.content}}\n\nYour tasks are:\n\n1- Identify and extract the following fields from the meeting content:\n{\n  \"project_name\": \"\",          // The name of the project discussed\n\"project_status\":\"\" // whether this is an initial meeting report or an intermediary meeting report where taks need to be updated (must be \"initial\" or \"intermediary\" )\n  \"start_date\":\"\", // the date of the report\n  \"actions\": [                 // List of concrete actions or tasks discussed\n    {\n      \"description\": \"\",       // Brief description of the task\n      \"status\":\"\",  // TO DO or IN PROGRESS or DONE\n      \"assigned_to\": \"\",       // Person responsible for the task\n      \"due_date\": \"\",          // Deadline or due date\n      \"notes\": \"\"              // Any additional information related to the task\n    }\n  ],\n  \"meeting_date\": \"\",          // The date when the meeting took place\n  \"general_notes\": \"\"          // Any general notes not linked to specific actions\n}\n2- Ensure that the output contains the json above only.\n\n3- If a task status is deemed Completed then it write it as DONE.\n\n4- If a meeting is scheduled (look for explicit time/date mention or title keywords like “next meeting”), note this separately so it can be synced to Teams or Calendar.\n\n5- Keep the formatting consistent for direct Jira and Teams integration.\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        760,
        860
      ],
      "id": "dcf260af-b8c6-454e-962e-5230a3e6c7bf",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        848,
        1075
      ],
      "id": "821cf6e8-cbf6-4039-86e5-3a3893d6999b",
      "name": "OpenAI Chat Model5",
      "credentials": {
        "openAiApi": {
          "id": "dYZWfaOXMEhGY7FU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://rosiemt29.atlassian.net/rest/api/3/project",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Basic cm9zaWVtdDI5QGdtYWlsLmNvbTpBVEFUVDN4RmZHRjBnRDVnbUo5MDIwZWN4emRtZ19ycEozZmxLV3F6ZVBITXVaejB0YWZUdUhKVk1oaS1zT2xTT2tWTUN4d3VvbTM1bi1Ja2lJa182S0YyQWN2dENhSm52dWJLdWVpMHBUeGt6Y2drMXF0OENWUUQ4T0RwZzhMcmhQMnVGWVcxT214UndxYVF4eU8xRFF1c0xhaXVCeE1oSzhxWm5PQXpFZkVBeUVjTlJoTFRkVWs9RUI3MTUzNkI="
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "assigneeType",
              "value": "PROJECT_LEAD"
            },
            {
              "name": "leadAccountId",
              "value": "712020:5c0f38f5-a7d2-444d-ba9f-b8c9bcbfc4c1"
            },
            {
              "name": "projectTemplateKey",
              "value": "com.pyxis.greenhopper.jira:gh-simplified-agility-scrum"
            },
            {
              "name": "url",
              "value": "http://atlassian.com"
            },
            {
              "name": "projectTypeKey",
              "value": "software"
            },
            {
              "name": "name",
              "value": "={{ $json.output.project_name }}"
            },
            {
              "name": "key",
              "value": "={{ $json.output.project_name.toUpperCase().match(/\\b[A-Z]/g).join('').substring(0, 5)}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        3512,
        900
      ],
      "id": "493827a9-a376-42e7-bb10-2ebf7e727285",
      "name": "create_project"
    },
    {
      "parameters": {
        "jsCode": "\nfunction normalizeAssignee(inputName) {\n  const name = inputName.toLowerCase();\n\n  const teamMap = [\n    {\n      aliases: [\"maram\", \"mara\", \"manom\", \"trabelsi\"],\n      jiraId: \"712020:2252e3e4-1471-49e6-8bd2-00914e2036eb\"\n    },\n    {\n      aliases: [\"iheb\", \"ihebih99\"],\n      jiraId: \"712020:90c222f1-6437-463b-ae70-9f3fc75d6cb6\"\n    },\n    {\n      aliases: [\"sonia\", \"gharsalli\"],\n      jiraId: \"615717bc9cdb9300724883d3\"\n    },\n    {\n      aliases: [\"engineering team\", \"iheb and manom\", \"iheb and maramm\",\"team\",\"Team\"],\n      jiraIds: \n        \"712020:90c222f1-6437-463b-ae70-9f3fc75d6cb6\"   \n      }\n  ];\n\n  for (const entry of teamMap) {\n    if (entry.aliases.some(alias => name.includes(alias))) {\n      return entry.jiraId || entry.jiraIds;\n    }\n  }\n\n  return inputName; // Return as-is if no match found\n}\n\n\nconst cleaned = $input.first().json.output.replace(/```json\\n?/, '').replace(/\\n```/, '').trim();\n\n\n  let project_id = JSON.parse(cleaned).project_id || JSON.parse(cleaned).projectID|| JSON.parse(cleaned).projectId;\n\n\nlet originalList = $input.last().json.output.actions;\n\nlet transformedList = originalList.map(item => ({\n  project_id: project_id,\n  description: `${item.due_date} - ${item.summaries} `,\n  summaries: item.description,\n  status:item.status,\n  due_date:item.due_date,\n  assigned_to : normalizeAssignee(item.assigned_to)\n}));\nreturn {transformedList};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4220,
        900
      ],
      "id": "a7f9f954-db52-4faa-826b-03ab071bea62",
      "name": "Code"
    },
    {
      "parameters": {
        "fieldToSplitOut": "transformedList",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        4440,
        900
      ],
      "id": "7a72c0b7-4f51-471a-be55-5e44b715e23d",
      "name": "Split Out"
    },
    {
      "parameters": {
        "batchSize": "={{ $('Merge1').last().json.output.actions.length}}",
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        4660,
        900
      ],
      "id": "d7001acc-a349-4030-abfa-4dd71ec86f3b",
      "name": "Loop Over Items"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        3920,
        900
      ],
      "id": "cedf238f-60ce-4541-863f-9a6222f8eeff",
      "name": "Merge1"
    },
    {
      "parameters": {
        "jsCode": "let id =$input.first().json.id ;\nlet actions = $input.last().json.output.actions;\n\nlet transformedList = actions.map(item => ({\n  project_id: id,\n  description: `${item.due_date} - ${item.description} `,\n  summaries: item.summaries,\n  status:item.status,\n  due_date:item.due_date,\n  assigned_to : item.assigned_to\n}));\nreturn {transformedList};\n\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4780,
        280
      ],
      "id": "66c5a8a5-3b13-4669-b9f0-0607b84fc7be",
      "name": "Code2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        4560,
        280
      ],
      "id": "e0fec503-8932-4e84-a69d-6f22ae4a7d72",
      "name": "Merge2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://rosiemt29.atlassian.net/rest/api/3/issue",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Basic cm9zaWVtdDI5QGdtYWlsLmNvbTpBVEFUVDN4RmZHRjBnRDVnbUo5MDIwZWN4emRtZ19ycEozZmxLV3F6ZVBITXVaejB0YWZUdUhKVk1oaS1zT2xTT2tWTUN4d3VvbTM1bi1Ja2lJa182S0YyQWN2dENhSm52dWJLdWVpMHBUeGt6Y2drMXF0OENWUUQ4T0RwZzhMcmhQMnVGWVcxT214UndxYVF4eU8xRFF1c0xhaXVCeE1oSzhxWm5PQXpFZkVBeUVjTlJoTFRkVWs9RUI3MTUzNkI="
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"fields\": {\n    \"assignee\": {\n      \"id\":\"{{$json.assigned_to}}\"\n    },\n    \"summary\":\"{{ $json.summaries ? $json.summaries : $json.description }}\",\n    \"duedate\": \"{{ $json.due_date }}\",\n    \"issuetype\": {\n      \"name\": \"Task\"\n    },\n    \"project\": {\n      \"id\":\"{{ $json.project_id.toString() }}\"\n    },\n    \"description\": {\n      \"content\": [\n        {\n          \"content\": [\n            {\n              \"text\": \"{{ $json.description }}\",\n              \"type\": \"text\"\n            }\n          ],\n          \"type\": \"paragraph\"\n        }\n      ],\n      \"type\": \"doc\",\n      \"version\": 1\n    },\n    \"reporter\": {\n      \"id\": \"712020:5c0f38f5-a7d2-444d-ba9f-b8c9bcbfc4c1\"\n    }\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        4880,
        900
      ],
      "id": "facd7a96-3658-4ac2-8eeb-6d29d54b77bc",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an AI agent tasked with two responsibilities:\n\n🔹 Step 1: Extract Structured JSON from the Meeting Report Text\nFrom the following unstructured meeting report, extract a JSON object with this format:\n{\n  \"project_name\": \"\",          \n  \"project_status\": \"\",         // \"initial\" or \"intermediary\"\n  \"start_date\": \"\",             // Equals the meeting_date\n  \"actions\": [\n    {\n      \"description\": \"\",       \n      \"status\": \"\",            // \"TO DO\", \"IN PROGRESS\", or \"DONE\"\n      \"assigned_to\": \"\",       // Must be only either : Sonia, Maram, or Iheb.\n      \"due_date\": \"\",          \n      \"notes\": \"\"              \n    }\n  ],\n  \"meeting_date\": \"\",         \n  \"general_notes\": \"\"         \n}\nExtraction Rules:\nproject_status:\n\n\"initial\" if it’s a kickoff or first meeting\n\n\"intermediary\" if it follows up on previous sprints or includes task updates\n\nstart_date = meeting_date\n\nTask status:\n\n\"TO DO\" → planned, upcoming, or newly assigned tasks\n\n\"IN PROGRESS\" → currently being worked on\n\n\"DONE\" → completed tasks\n\nUse empty strings for fields like due_date or notes if unspecified\n\nCapture all assigned tasks (for Sonia, Maram, or Iheb), and do not miss any task mentioned.\n\n🔹 Step 2: Validate Extracted JSON Against Provided JSON Input\nCompare the extracted JSON to the inputted JSON and apply the following validation rules:\n\n✅ Accept paraphrased task descriptions if the original intent is preserved.\n\n✅ Due dates can be empty if not specified in the report.\n\n✅ If \"project_status\" is \"initial\", allow all tasks to be marked \"TO DO\" or \"IN PROGRESS\" — both are valid in early stages.\n\n✅ Only flag tasks as incorrect if:\n\nA task is missing entirely\n\nA task is assigned to the wrong person\n\nThe status misrepresents actual progress\n\n✅ Accept \"project_status\" as either \"initial\" or \"intermediary\" without strict enforcement.\n\n✅ Ensure that all key tasks discussed in the meeting are present in the JSON.\n\n✅ Allow minor flexibility in language, but not in task accuracy.\n\nInput:\nOriginal Meeting Notes (text):\n{{ $('Merge').item.json.choices[0].message.content }}\nExtracted JSON (to validate against):\n{{ $('AI Agent2').item.json.output }}\nOutput:\nIf the extracted JSON mostly represents the meeting notes:\n\n{\n  \"Validation Verdict\": \"Valid\"\n}\nIf it is missing elements or largly innacurate:\n\n\n{\n  \"Validation Verdict\": \"Invalid\",\n  \"Issues Found\": [\n    \"List missing tasks, incorrect assignments, or misrepresented statuses\"\n  ],\n  \"Corrected JSON\": {\n    \"project_name\": \"...\",\n    \"project_status\": \"...\",\n    \"start_date\": \"...\",\n    \"actions\": [...],\n    \"meeting_date\": \"...\",\n    \"general_notes\": \"...\"\n  }\n}",
        "options": {
          "systemMessage": "=You are a pragmatic AI validator tasked with checking if a JSON object correctly represents key information from a meeting report.\n\nYour goal is to confirm whether the JSON is structurally valid and **reasonably consistent** with the original input. Do not penalize the output for minor phrasing, paraphrasing, or missing optional details unless they materially affect understanding or task execution.\n\nBe concise and tolerant of slight textual differences. Focus only on structural compliance, logical alignment with the input, and clear semantic correctness.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1360,
        860
      ],
      "id": "4233440e-7062-4911-81c6-3cc5794722a0",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1384,
        1075
      ],
      "id": "ff8b1ff4-2349-4aba-9e18-d1c05b2b6499",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "dYZWfaOXMEhGY7FU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 3,
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1136,
        855
      ],
      "id": "52530cdc-fbf2-4bf1-b5e5-f96b39dd6fc0",
      "name": "Loop Over Items1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "8e967d8c-cb23-40cb-aa99-bd8c1a8840cf",
              "leftValue": "={{ $json.output.trim().includes('Invalid') }}",
              "rightValue": "Valid",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1740,
        860
      ],
      "id": "8cb6269b-68fd-4ed5-8bc8-b94d0d1145bc",
      "name": "If1"
    },
    {
      "parameters": {
        "jsCode": "let actions = $input.first().json.transformedList; // If you're processing a JSON array\n\nlet transformedList = actions.map(item => {\n  // Normalize status\n  let newStatus;\n  switch (item.status?.toUpperCase()) {\n    case \"DONE\":\n      newStatus = 31;\n      break;\n    case \"IN PROGRESS\":\n      newStatus = 21;\n      break;\n    case \"TO DO\":\n      newStatus = 11;\n      break;\n    default:\n      newStatus = item.status;\n  }\n\n  // Copy description to summaries if empty\n  const summary = item.summaries?.trim() ? item.summaries : item.description;\n  \n\n  return {  project_id: item.project_id,\n    description: item.description,\n    summaries: summary,\n    status: newStatus,\n    due_date: item.due_date,\n    assigned_to: item.assigned_to   };\n});\n\nreturn transformedList.map(i => ({ json: i }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5000,
        280
      ],
      "id": "1a22971a-b661-47d1-805b-4543e95b319c",
      "name": "Code5"
    },
    {
      "parameters": {
        "url": "https://rosiemt29.atlassian.net/rest/api/3/project/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{\"Digital Marketing Campaign: Service Rebranding to (NimbusSync)\".replaceAll(/[^a-zA-Z\\s]/g,\"\").split(' ')}}"
            },
            {
              "name": "query",
              "value": "={{ $json.output.project_name }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Basic cm9zaWVtdDI5QGdtYWlsLmNvbTpBVEFUVDN4RmZHRjBnRDVnbUo5MDIwZWN4emRtZ19ycEozZmxLV3F6ZVBITXVaejB0YWZUdUhKVk1oaS1zT2xTT2tWTUN4d3VvbTM1bi1Ja2lJa182S0YyQWN2dENhSm52dWJLdWVpMHBUeGt6Y2drMXF0OENWUUQ4T0RwZzhMcmhQMnVGWVcxT214UndxYVF4eU8xRFF1c0xhaXVCeE1oSzhxWm5PQXpFZkVBeUVjTlJoTFRkVWs9RUI3MTUzNkI="
            }
          ]
        },
        "options": {
          "queryParameterArrays": "brackets"
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3480,
        280
      ],
      "id": "bda4fd3a-76eb-4d14-9692-0e31a5c22df9",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "fieldToSplitOut": "values",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3860,
        280
      ],
      "id": "86d41494-a4b6-4bf7-a1b9-62dbfcfb9736",
      "name": "Split Out7"
    },
    {
      "parameters": {
        "fieldToSplitOut": "name, id",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        4160,
        280
      ],
      "id": "32243521-d234-4320-ac8a-dd957a3ddd95",
      "name": "Split Out8"
    },
    {
      "parameters": {
        "jsCode": "function normalize(name) {\n  return name\n    .replace(/[^a-zA-Z\\s]/g, '')\n    .toLowerCase()\n    .split(/\\s+/)\n    .sort()\n    .join(' ')\n    .trim();\n}\nconst inputName = $(\"If\").first().json.output.project_name;\nconst inputnamenorm = normalize(inputName);\nfor (const item of $input.all()) {\n  let n = normalize(item.json.name) ;\n  if (n === inputnamenorm){\n    let id = item.json.id;\n    let name = item.json.name;\n    return {id,name}\n  };\n}\nreturn { matched: false };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4360,
        280
      ],
      "id": "e180d435-f285-4e43-9749-a977d2d6b503",
      "name": "Code10"
    },
    {
      "parameters": {
        "jsCode": "let to_do_list = [];\nlet In_prog_list = [];\nlet done_list = [];\n\n// Process all input items\nfor (const item of $input.all()) {\n  const data = item.json;\n  \n  if (data.status === 11) {\n    to_do_list.push(data);\n  } else if (data.status === 21) {\n    In_prog_list.push(data);\n  } else {\n    done_list.push(data);\n  }\n}\n\n// Return the populated lists\nreturn {\n    to_do_list  ,\n    In_prog_list  ,\n    done_list  \n  };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5240,
        280
      ],
      "id": "deea0e15-134d-4cc1-9596-eb441c1d3687",
      "name": "Code4"
    },
    {
      "parameters": {
        "jsCode": "const text = $input.first().json.output;  // replace with your actual input key if needed\n\n// Use regex to extract the JSON block between ```json and ```\nconst match = text.match(/```json([\\s\\S]*?)```/); \n\nif (match && match[1]) {\n  try {\n    const jsonData = JSON.parse(match[1]);\n    return { json: jsonData };\n  } catch (err) {\n    return { json: { error: \"Invalid JSON format\" } };\n  }\n} else {\n  return { json: { error: \"No JSON block found in the text.\" } };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1952,
        605
      ],
      "id": "c52efd0a-e853-4aa0-aeab-59d336b6f212",
      "name": "Code6"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "sendTo": "maramtrabelsi1212@gmail.com",
        "subject": "Approval Required",
        "message": "={{ $json.text }}",
        "responseType": "customForm",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Report Confirmed ?",
              "fieldType": "textarea",
              "placeholder": "Confirmed",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2548,
        605
      ],
      "id": "5704627a-57cd-4073-9ad7-1e0f87f75950",
      "name": "Gmail1",
      "webhookId": "28cb2a21-c9e0-409a-8542-ba8b0cde18d5",
      "credentials": {
        "gmailOAuth2": {
          "id": "LVLMq9zQvphbXDM9",
          "name": "Gmail account 9"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are ActionReview AI — a smart assistant specialized in reviewing and validating task items derived from project meeting minutes. Your role is to analyze the supervisor’s reply to a list of proposed action items, identify if any corrections are needed, and return the final validated action list — either as-is or with corrections applied.\n\n🔹 INPUTS\noriginal_actions: The list of action items extracted from the meeting. ({{ $('Code6').item.json.toJsonString() }})\n\nsupervisor_reply: The supervisor’s feedback. ({{ $json.data['Report Confirmed ?'] }})\n\n🔹 RULES\nAnalyze Supervisor Reply:\n\nIf the supervisor confirms the action list:\n  if the due_date is empty input {{ $today }} date as YYYY-MM-dd format then \n\nReturn original_actions.\n\nIf the supervisor requests changes:\n\nExtract corrections in this format:\n\n[\n  {\n    \"field_to_correct\": \"description\" | \"assigned_to\" | \"due_date\" | \"notes\",\n    \"original_value\": \"string\",\n    \"suggested_change\": \"string\",\n    \"reason\": \"optional string\"\n  }\n]\nApply Corrections:\n\nUpdate original_actions with the corrections.\n\nReturn the modified updated_actions.\n\n🔹 OUTPUT FORMAT\nOnly return the final actions as a json.\n{\n  \"project_name\" : \"\",\n  \"Status\":\"\",\n  \"actions\": [\n    {\"assigned_to\" : \"\",\n      \"due_date\" : \"\", #change the date format to yyyy-MM-dd\n      \"description\" : \"description\" \"assigned_to\" \"due_date\",\n      \"summaries\":\"notes\",\n      \"status\":\"\"\n    }\n  ]\n\"Scheduled meeting\": [\n\"meeting_date\":\"\",\n\"meeting_time\":\"\",\n\"meeting_subject\":\"\"\n]\n}\nNo status object. No commentary. No extra text.\nJust the final validated actions — corrected if needed, unchanged if confirmed.\n\n",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        2800,
        600
      ],
      "id": "47d7f74c-d166-4b4f-b542-a0a3ded16588",
      "name": "Basic LLM Chain1",
      "retryOnFail": true
    },
    {
      "parameters": {
        "jsonSchemaExample": "{  \"project_name\": \"AI Automation for Backlog Creation in Project Management\", \"status\" :\"initial meeting \",\"actions\": [    {     \"description\": \"Write meeting summaries with clear task assignments for each engineer\",      \"assigned_to\": \"Sonia\",      \"due_date\": \"25/05/2025\",      \"summaries\": \"Summaries should be detailed enough for AI processing; not overly technical\"   },  {      \"description\": \"Select OCR model for information extraction\", \"status\":\"TO DO\",     \"assigned_to\": \"Maram\",      \"due_date\": \"20/05/2025\",      \"summaries\": \"Applies to processing image-based summaries\"    }],\"Scheduled_meeting\": [\n{\"meeting_date\":\"\",\n\"meeting_time\":\"\",\n\"meeting_subject\":\"\"\n}]}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        2916,
        825
      ],
      "id": "d8f10e8a-29b4-4579-a8fa-7b3b2caf1736",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2796,
        1525
      ],
      "id": "4fd386bc-92dc-4567-ab9f-7c8ab13bb248",
      "name": "OpenAI Chat Model2",
      "credentials": {
        "openAiApi": {
          "id": "dYZWfaOXMEhGY7FU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2796,
        825
      ],
      "id": "facb5459-b77b-4635-a658-f5b786da1efe",
      "name": "OpenAI Chat Model6",
      "credentials": {
        "openAiApi": {
          "id": "dYZWfaOXMEhGY7FU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=I will provide a JSON project report. Your task is to generate a full-width, professional, and Gmail-compatible HTML email using the data. The email should have the following features:\n\nA clean, full-width container that looks tidy in Gmail message.\n\nA header with the project name, project status, start date, and meeting date.\n\nA well-formatted table for the “actions” list with these columns: Description, Status, Assigned To, Due Date, Notes.\n\nMake sure the table contains all the actions.\n\nDisplay General Notes at the bottom in a separate section.\n\nMake sure the HTML email uses inline-friendly CSS styles suitable for Gmail rendering.\n-> return only the html result with no commentary.\n-> ALLWAYS include all the tasks from the json output in the actions table.\nHere's the JSON input:\n{{ $('AI Agent2').item.json.output }}\n\n\nhere is an example of html output format : \n\"<!DOCTYPE html>\\n<html>\\n<head>\\n  <style>\\n    .container {\\n      display: block;\\n      width: 100% !important;\\n      max-width: 600px !important;\\n      margin: 0 auto;\\n      clear: both;\\n    }\\n    .header, .actions, .general-notes {\\n      margin-bottom: 20px;\\n      padding: 20px;\\n      border: 1px solid #ddd;\\n    }\\n    table {\\n      width: 100%;\\n      margin-bottom: 20px;\\n      border-collapse: collapse;\\n    }\\n    thead tr th {\\n      text-align: left;\\n      padding: 10px;\\n      border: 1px solid #ddd;\\n    }\\n    tbody tr td {\\n      padding: 10px;\\n      border: 1px solid #ddd;\\n    }\\n  </style>\\n</head>\\n<body>\\n  <div class=\"container\">\\n    <div class=\"header\">\\n      <h2>Project Name: AI-Powered E-Commerce Assistant</h2>\\n      <p>Project Status: intermediary</p>\\n      <p>Start Date: June 30, 2025</p>\\n      <p>Meeting Date: July 14, 2025</p>\\n    </div>\\n    <div class=\"actions\">\\n      <h3>Actions:</h3>\\n      <table>\\n        <thead>\\n          <tr>\\n            <th>Description</th>\\n            <th>Status</th>\\n            <th>Assigned To</th>\\n            <th>Due Date</th>\\n            <th>Notes</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          <tr>\\n            <td>Set up the front-end environment and deliver a functional prototype of the chatbot interface</td>\\n            <td>DONE</td>\\n            <td>Maram</td>\\n            <td>July 14, 2025</td>\\n            <td>Completed during Sprint 1</td>\\n          </tr>\\n          <tr>\\n            <td>Complete server configuration, establish initial API structure, and conduct testing with AI providers</td>\\n            <td>DONE</td>\\n            <td>Iheb</td>\\n            <td>July 14, 2025</td>\\n            <td>OpenAI chosen for integration</td>\\n          </tr>\\n          <tr>\\n            <td>Finalize the initial version of technical and functional documentation outlining system architecture and development roadmap</td>\\n            <td>DONE</td>\\n            <td>Sonia</td>\\n            <td>July 14, 2025</td>\\n            <td></td>\\n          </tr>\\n          <tr>\\n            <td>Enhance chatbot UI by adding typing indicators and improving responsiveness on mobile devices</td>\\n            <td>IN PROGRESS</td>\\n            <td>Maram</td>\\n            <td>July 28, 2025</td>\\n            <td>Part of current deliverables</td>\\n          </tr>\\n          <tr>\\n            <td>Integrate OpenAI API and develop logic for personalized product recommendations</td>\\n            <td>IN PROGRESS</td>\\n            <td>Iheb</td>\\n            <td>July 28, 2025</td>\\n            <td>Integration phase</td>\\n          </tr>\\n          <tr>\\n            <td>Prepare a test database with sample product data and coordinate integration between front-end and back-end</td>\\n            <td>IN PROGRESS</td>\\n            <td>Sonia</td>\\n            <td>July 28, 2025</td>\\n            <td>Coordination task</td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n    <div class=\"general-notes\">\\n      <h3>General Notes:</h3>\\n      <p>The next meeting is scheduled for Monday, July 28, 2025, at 10:00 AM to review integration progress and demonstrate the improved chatbot experience.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>\""
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        2180,
        1300
      ],
      "id": "3162fd84-c64e-40f7-8f57-fb9ee3ac241e",
      "name": "Basic LLM Chain2",
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4",
          "mode": "list",
          "cachedResultName": "gpt-4"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2260,
        1525
      ],
      "id": "51759ff7-9cb1-4bf7-88db-65084fa6d557",
      "name": "OpenAI Chat Model7",
      "credentials": {
        "openAiApi": {
          "id": "dYZWfaOXMEhGY7FU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "sendTo": "maramtrabelsi1212@gmail.com",
        "subject": "Approval Required",
        "message": "={{ $json.text }}",
        "responseType": "customForm",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Report Confirmed ?",
              "fieldType": "textarea",
              "placeholder": "Confirmed",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2548,
        1305
      ],
      "id": "a4c48068-b73d-42e8-bd5d-b0644514961a",
      "name": "Gmail2",
      "webhookId": "83489f4e-083b-4a04-9bc2-11645b0d82f0",
      "credentials": {
        "gmailOAuth2": {
          "id": "LVLMq9zQvphbXDM9",
          "name": "Gmail account 9"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=I will provide a JSON project report. Your task is to generate a full-width, professional, and Gmail-compatible HTML email using the data. The email should have the following features:\n\nA clean, full-width container that looks tidy in Gmail message.\n\nA header with the project name, project status, start date, and meeting date.\n\nA well-formatted table for the “actions” list with these columns: Description, Status, Assigned To, Due Date, Notes.\n\nDisplay General Notes at the bottom in a separate section.\n\nMake sure the HTML email uses inline-friendly CSS styles suitable for Gmail rendering.\n-> return only the html result.\nHere's the JSON input:\n{{ $json.toJsonString() }}\n\n\n\nhere is an example of html ouput format : \n\"<!DOCTYPE html>\\n<html>\\n<head>\\n  <style>\\n    .container {\\n      display: block;\\n      width: 100% !important;\\n      max-width: 600px !important;\\n      margin: 0 auto;\\n      clear: both;\\n    }\\n    .header, .actions, .general-notes {\\n      margin-bottom: 20px;\\n      padding: 20px;\\n      border: 1px solid #ddd;\\n    }\\n    table {\\n      width: 100%;\\n      margin-bottom: 20px;\\n      border-collapse: collapse;\\n    }\\n    thead tr th {\\n      text-align: left;\\n      padding: 10px;\\n      border: 1px solid #ddd;\\n    }\\n    tbody tr td {\\n      padding: 10px;\\n      border: 1px solid #ddd;\\n    }\\n  </style>\\n</head>\\n<body>\\n  <div class=\"container\">\\n    <div class=\"header\">\\n      <h2>Project Name: AI-Powered E-Commerce Assistant</h2>\\n      <p>Project Status: intermediary</p>\\n      <p>Start Date: June 30, 2025</p>\\n      <p>Meeting Date: July 14, 2025</p>\\n    </div>\\n    <div class=\"actions\">\\n      <h3>Actions:</h3>\\n      <table>\\n        <thead>\\n          <tr>\\n            <th>Description</th>\\n            <th>Status</th>\\n            <th>Assigned To</th>\\n            <th>Due Date</th>\\n            <th>Notes</th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          <tr>\\n            <td>Set up the front-end environment and deliver a functional prototype of the chatbot interface</td>\\n            <td>DONE</td>\\n            <td>Maram</td>\\n            <td>July 14, 2025</td>\\n            <td>Completed during Sprint 1</td>\\n          </tr>\\n          <tr>\\n            <td>Complete server configuration, establish initial API structure, and conduct testing with AI providers</td>\\n            <td>DONE</td>\\n            <td>Iheb</td>\\n            <td>July 14, 2025</td>\\n            <td>OpenAI chosen for integration</td>\\n          </tr>\\n          <tr>\\n            <td>Finalize the initial version of technical and functional documentation outlining system architecture and development roadmap</td>\\n            <td>DONE</td>\\n            <td>Sonia</td>\\n            <td>July 14, 2025</td>\\n            <td></td>\\n          </tr>\\n          <tr>\\n            <td>Enhance chatbot UI by adding typing indicators and improving responsiveness on mobile devices</td>\\n            <td>IN PROGRESS</td>\\n            <td>Maram</td>\\n            <td>July 28, 2025</td>\\n            <td>Part of current deliverables</td>\\n          </tr>\\n          <tr>\\n            <td>Integrate OpenAI API and develop logic for personalized product recommendations</td>\\n            <td>IN PROGRESS</td>\\n            <td>Iheb</td>\\n            <td>July 28, 2025</td>\\n            <td>Integration phase</td>\\n          </tr>\\n          <tr>\\n            <td>Prepare a test database with sample product data and coordinate integration between front-end and back-end</td>\\n            <td>IN PROGRESS</td>\\n            <td>Sonia</td>\\n            <td>July 28, 2025</td>\\n            <td>Coordination task</td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n    <div class=\"general-notes\">\\n      <h3>General Notes:</h3>\\n      <p>The next meeting is scheduled for Monday, July 28, 2025, at 10:00 AM to review integration progress and demonstrate the improved chatbot experience.</p>\\n    </div>\\n  </div>\\n</body>\\n</html>\""
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        2172,
        605
      ],
      "id": "5dbedcca-3e12-4ffc-ab38-8c0c2781b33a",
      "name": "Basic LLM Chain3"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4",
          "mode": "list",
          "cachedResultName": "gpt-4"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2260,
        825
      ],
      "id": "407686ae-c02f-494b-a409-c6db162894ca",
      "name": "OpenAI Chat Model8",
      "credentials": {
        "openAiApi": {
          "id": "dYZWfaOXMEhGY7FU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "options": {
          "jql": "=project =  {{ $json.done_list?.[0]?.project_id || $json.to_do_list?.[0]?.project_id }}"
        }
      },
      "type": "n8n-nodes-base.jiraTool",
      "typeVersion": 1,
      "position": [
        5860,
        420
      ],
      "id": "eea362a0-fd55-4421-a6a2-b727d0824d07",
      "name": "get_all_issues",
      "credentials": {
        "jiraSoftwareCloudApi": {
          "id": "2N0za8xf0HFwIb5i",
          "name": "Jira SW Cloud account 3"
        }
      }
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "binaryPropertyName": "attachment_0",
        "options": {
          "temperature": 0
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        100,
        1330
      ],
      "id": "db87289e-534f-4bdd-9167-03c2c7e062eb",
      "name": "Transcription",
      "credentials": {
        "openAiApi": {
          "id": "dYZWfaOXMEhGY7FU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "52a2f0d9-3137-4f6e-a2c1-8285694f6159",
              "name": "choices[0].message.content",
              "type": "string",
              "value": "={{ $json.text ||$json.data }}  "
            }
          ]
        },
        "options": {}
      },
      "id": "49fbe4ce-26d4-4464-bd2d-06c571be06b6",
      "name": "Get only the text7",
      "type": "n8n-nodes-base.set",
      "position": [
        320,
        1330
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "# DATA VAIDATION\n",
        "height": 1420,
        "width": 2620,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        740,
        240
      ],
      "typeVersion": 1,
      "id": "e695ea78-a18f-4d9b-a47e-4248cc748e95",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://rosiemt29.atlassian.net/rest/api/3/issue",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Basic cm9zaWVtdDI5QGdtYWlsLmNvbTpBVEFUVDN4RmZHRjBnRDVnbUo5MDIwZWN4emRtZ19ycEozZmxLV3F6ZVBITXVaejB0YWZUdUhKVk1oaS1zT2xTT2tWTUN4d3VvbTM1bi1Ja2lJa182S0YyQWN2dENhSm52dWJLdWVpMHBUeGt6Y2drMXF0OENWUUQ4T0RwZzhMcmhQMnVGWVcxT214UndxYVF4eU8xRFF1c0xhaXVCeE1oSzhxWm5PQXpFZkVBeUVjTlJoTFRkVWs9RUI3MTUzNkI="
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('JSON', ``, 'json') }}",
        "options": {},
        "optimizeResponse": true
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        5700,
        540
      ],
      "id": "538d0325-5237-45c4-beef-43c3dc3287e6",
      "name": "create_issue",
      "retryOnFail": true
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "analyze",
        "modelId": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "GPT-4O"
        },
        "text": "extract all the text in this image",
        "inputType": "base64",
        "binaryPropertyName": "attachment_0",
        "options": {
          "detail": "auto"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        120,
        720
      ],
      "id": "0c06e99f-7b2a-47ae-a5ef-05bb5bf3cd81",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "dYZWfaOXMEhGY7FU",
          "name": "OpenAi account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get only the text": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "DOCX to Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Transcription",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get only the text1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Get only the text2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Get only the text1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Get only the text2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DOCX to Text": {
      "main": [
        [
          {
            "node": "Get only the text6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get only the text6": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          },
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "initial_report",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "follow_up_report",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "update_issues": {
      "ai_tool": [
        [
          {
            "node": "follow_up_report",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          },
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "initial_report",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "create_project": {
      "ai_tool": [
        [
          {
            "node": "initial_report",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "initial_report": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Basic LLM Chain2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Split Out7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out7": {
      "main": [
        [
          {
            "node": "Split Out8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out8": {
      "main": [
        [
          {
            "node": "Code10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code10": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "follow_up_report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail1": {
      "main": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Basic LLM Chain3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model6": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain2": {
      "main": [
        [
          {
            "node": "Gmail2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model7": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Gmail2": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model8": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain3": {
      "main": [
        [
          {
            "node": "Gmail1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_all_issues": {
      "ai_tool": [
        [
          {
            "node": "follow_up_report",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Transcription": {
      "main": [
        [
          {
            "node": "Get only the text7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get only the text7": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "create_issue": {
      "ai_tool": [
        [
          {
            "node": "follow_up_report",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Get only the text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f5552829-2898-47de-a42e-9eca8b857699",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "eda11f78dc41be1aa2e6362cde9ae6dd4b7bbe5c2c22874197c6fa1fa408e45b"
  },
  "id": "Wj99HDdzG8Tewgbt",
  "tags": []
}