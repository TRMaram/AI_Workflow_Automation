{
  "name": "PMI_controle_agent",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {
          "q": "has:attachment"
        },
        "options": {
          "downloadAttachments": true
        }
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -360,
        860
      ],
      "id": "0d679ed2-f941-41e7-a7a7-b83a408fa059",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "LVLMq9zQvphbXDM9",
          "name": "Gmail account 9"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "52a2f0d9-3137-4f6e-a2c1-8285694f6159",
              "name": "choices[0].message.content",
              "type": "string",
              "value": "=  {{ $json.text }}"
            }
          ]
        },
        "options": {}
      },
      "id": "c9a08407-7b00-4112-b332-d05af9ca3ac3",
      "name": "Get only the text",
      "type": "n8n-nodes-base.set",
      "position": [
        620,
        860
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $binary.attachment_0.mimeType }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "a26e1ff6-ac77-43e2-8cdf-34d1cd45b43a"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "b3d19f78-cc97-4287-9570-85430e65acf4",
                    "leftValue": "={{ $binary.attachment_0.mimeType }}",
                    "rightValue": "=image/",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "f88aa616-408c-4241-834d-a20015220abc",
                    "leftValue": "={{ $binary.attachment_0.mimeType }}",
                    "rightValue": "application/vnd.google-apps.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "291f2639-deb6-4ed6-aea0-09ab9e9c6cd6",
                    "leftValue": "={{ $binary.attachment_0.mimeType }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "allMatchingOutputs": true
        }
      },
      "id": "c98ba91f-03ab-4457-91b0-ba0b0173c5e8",
      "name": "Switch1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -160,
        840
      ]
    },
    {
      "parameters": {
        "numberInputs": 4
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        880,
        860
      ],
      "id": "f986459f-7f7a-4bae-8a74-09c2d97f1331",
      "name": "Merge"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "52a2f0d9-3137-4f6e-a2c1-8285694f6159",
              "name": "choices[0].message.content",
              "type": "string",
              "value": "={{ $json.text ||$json.data }}  "
            }
          ]
        },
        "options": {}
      },
      "id": "6d239cff-9ac0-4ca3-9b7c-2d92c42bf6e2",
      "name": "Get only the text1",
      "type": "n8n-nodes-base.set",
      "position": [
        600,
        1040
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "52a2f0d9-3137-4f6e-a2c1-8285694f6159",
              "name": "choices[0].message.content",
              "type": "string",
              "value": "={{ $json.text }}"
            }
          ]
        },
        "options": {}
      },
      "id": "6b2a482f-66cb-4912-975b-2a3acd0272bc",
      "name": "Get only the text2",
      "type": "n8n-nodes-base.set",
      "position": [
        620,
        500
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "operation": "text",
        "binaryPropertyName": "attachment_0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        260,
        1080
      ],
      "id": "4bbcd5ab-f8fb-491f-a193-e5c97aabf37e",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "operation": "pdf",
        "binaryPropertyName": "attachment_0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        280,
        500
      ],
      "id": "e0dccf1c-9188-4576-896d-3d80c1e35870",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "inputBinaryField": "attachment_0"
      },
      "type": "n8n-nodes-docx-converter.docxToText",
      "typeVersion": 1,
      "position": [
        260,
        1240
      ],
      "id": "d23cbef7-7ca5-4d2c-8722-254b99f8727b",
      "name": "DOCX to Text"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "52a2f0d9-3137-4f6e-a2c1-8285694f6159",
              "name": "choices[0].message.content",
              "type": "string",
              "value": "={{ $json.text ||$json.data }}  "
            }
          ]
        },
        "options": {}
      },
      "id": "3aa26154-e048-4877-a85e-bdcc289c9501",
      "name": "Get only the text6",
      "type": "n8n-nodes-base.set",
      "position": [
        600,
        1240
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.1.24:5000/ocr/GOT",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "attachment_0",
              "inputDataFieldName": "attachment_0"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        280,
        840
      ],
      "id": "f694b15d-4e69-4d97-bb58-95071971b8bf",
      "name": "GOT_OCR"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "sendTo": "maramtrabelsi1212@gmail.com",
        "subject": "Approval Required",
        "message": "={{ $('AI Agent2').item.json.output }}",
        "responseType": "customForm",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Report Confirmed ?",
              "fieldType": "textarea",
              "placeholder": "Confirmed",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1340,
        1080
      ],
      "id": "ed289392-cb28-4f2f-a6b2-51150058b9f9",
      "name": "Gmail",
      "webhookId": "9362b96a-1edb-4b63-8d73-4e01e7ea3431",
      "credentials": {
        "gmailOAuth2": {
          "id": "LVLMq9zQvphbXDM9",
          "name": "Gmail account 9"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are ActionReview AI — a smart assistant specialized in reviewing and validating task items derived from project meeting minutes. Your role is to analyze the supervisor’s reply to a list of proposed action items, identify if any corrections are needed, and return the final validated action list — either as-is or with corrections applied.\n\n🔹 INPUTS\noriginal_actions: The list of action items extracted from the meeting. ({{ $('AI Agent2').item.json.output }})\n\nsupervisor_reply: The supervisor’s feedback. ({{ $json.data['Report Confirmed ?'] }})\n\n🔹 RULES\nAnalyze Supervisor Reply:\n\nIf the supervisor confirms the action list:\n  if the due_date is empty input {{ $today }} date as YYYY-MM-dd format then \n\nReturn original_actions.\n\nIf the supervisor requests changes:\n\nExtract corrections in this format:\n\n[\n  {\n    \"field_to_correct\": \"description\" | \"assigned_to\" | \"due_date\" | \"notes\",\n    \"original_value\": \"string\",\n    \"suggested_change\": \"string\",\n    \"reason\": \"optional string\"\n  }\n]\nApply Corrections:\n\nUpdate original_actions with the corrections.\n\nReturn the modified updated_actions.\n\n🔹 OUTPUT FORMAT\nOnly return the final actions as a json.\n{\n  \"project_name\" : \"\",\n  \"Status\":\"\",\n  \"actions\": [\n    {\"assigned_to\" : \"\",\n      \"due_date\" : \"\", #change the date format to yyyy-MM-dd\n      \"description\" : \"description\" \"assigned_to\" \"due_date\",\n      \"summaries\":\"notes\",\n      \"status\":\"\"\n    }\n  ]\n\"Scheduled meeting\": [\n\"meeting_date\":\"\",\n\"meeting_time\":\"\",\n\"meeting_subject\":\"\"\n]\n}\nNo status object. No commentary. No extra text.\nJust the final validated actions — corrected if needed, unchanged if confirmed.\n\n",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        1560,
        1080
      ],
      "id": "ef5478e9-4e8c-4550-897e-feacd9cb3d55",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{  \"project_name\": \"AI Automation for Backlog Creation in Project Management\", \"status\" :\"initial meeting \",\"actions\": [    {     \"description\": \"Write meeting summaries with clear task assignments for each engineer\",      \"assigned_to\": \"Sonia\",      \"due_date\": \"25/05/2025\",      \"summaries\": \"Summaries should be detailed enough for AI processing; not overly technical\"   },  {      \"description\": \"Select OCR model for information extraction\", \"status\":\"TO DO\",     \"assigned_to\": \"Maram\",      \"due_date\": \"20/05/2025\",      \"summaries\": \"Applies to processing image-based summaries\"    }],\"Scheduled_meeting\": [\n{\"meeting_date\":\"\",\n\"meeting_time\":\"\",\n\"meeting_subject\":\"\"\n}]}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1780,
        1280
      ],
      "id": "c5e2f8ef-40c1-42a3-9b83-d533e1263ce2",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "\nlet originalList = $json.output.Scheduled_meeting ;\n\nreturn {originalList};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2280,
        2440
      ],
      "id": "4992fce1-364a-4278-b491-f482ae896f5a",
      "name": "Code1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "originalList",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2500,
        2440
      ],
      "id": "1827f233-74ac-4fd8-b239-903a2ed40eb7",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=you are a scheduler IA , i want you to help add this meeting to my calender and keep in my mind that the time now is {{ $now }} and the timeZone is Central European Standard Time (GMT+1):\nmeeting_details :\nmeeting_date : {{ $json.originalList[0].meeting_date }}\nmeeting_time :  {{ $json.originalList[0].meeting_time }}\nmeeting_subject :{{ $json.originalList[0].meeting_subject }}\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        2720,
        2440
      ],
      "id": "56210781-9b4a-4f88-bfd4-7dd8b4d49ce1",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2760,
        2660
      ],
      "id": "b5f448f0-fe50-411f-bf51-2f7e9d6e2931",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "dYZWfaOXMEhGY7FU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "rosiemt29@gmail.com",
          "mode": "list",
          "cachedResultName": "rosiemt29@gmail.com"
        },
        "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
        "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
        "additionalFields": {
          "description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Description', ``, 'string') }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        3080,
        2660
      ],
      "id": "34dff1e8-043b-4b74-9c5a-51eb7b4dee91",
      "name": "Google Calendar",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "2t7mltjvgmgcheAM",
          "name": "Google Calendar account 2"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        2520,
        2180
      ],
      "id": "34a2021d-ba69-4d18-a9fd-f1c29aef5f43",
      "name": "OpenAI Chat Model3",
      "credentials": {
        "openAiApi": {
          "id": "dYZWfaOXMEhGY7FU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        4100,
        1680
      ],
      "id": "60296ef2-7f06-4def-b9ed-6df4826872ec",
      "name": "OpenAI Chat Model4",
      "credentials": {
        "openAiApi": {
          "id": "dYZWfaOXMEhGY7FU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "options": {
          "jql": "=project={{ $json.list[0].json.project_id}}"
        }
      },
      "type": "n8n-nodes-base.jiraTool",
      "typeVersion": 1,
      "position": [
        4540,
        1520
      ],
      "id": "85a030a7-d5d2-407a-a144-2ff347f8553f",
      "name": "get_all_issues_id",
      "credentials": {
        "jiraSoftwareCloudApi": {
          "id": "YdvFt7v4vz7qIXDq",
          "name": "Jira SW Cloud account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "issueKey": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Issue_Key', ``, 'string') }}",
        "updateFields": {
          "statusId": {
            "__rl": true,
            "mode": "id",
            "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Status', ``, 'string') }}",
            "__regex": "^([0-9]{1,})"
          }
        }
      },
      "type": "n8n-nodes-base.jiraTool",
      "typeVersion": 1,
      "position": [
        4480,
        1720
      ],
      "id": "18197680-18d8-4866-94c1-f1d5456d8f83",
      "name": "update_issues",
      "retryOnFail": true,
      "credentials": {
        "jiraSoftwareCloudApi": {
          "id": "YdvFt7v4vz7qIXDq",
          "name": "Jira SW Cloud account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an AI assistant responsible for updating Jira task status.\nInput : \n\"project_id\":{{ $json.list[0].json.project_id}}\nThe user will input a new tasks descriptions\n\"new_tasks\":{{ $json.list.toJsonString() }}\nYou have access to:\n\nget_all_issues_id(project_id) → retrieves a list of issues from project(project_id), each with:\n  * id: the issue identifier (e.g., JIRA-123)\n  * actions: the current task description\n  * status: the current status of the task (e.g done, to do, in progress)\n\n  update_issues(status_id, id) → updates  the task with the given status_id.\n\ncreate_issue(actions,project_id) → creates a new Jira task with the given description.\n\n\n\n\nYour responsibilities:\n- Retrieve the current list of issues using get_all_issues_id(project_id).\n\n- For each new task description provided by the user:\n\nSearch for a matching or related task in the existing list.\n\nApply the following logic:\n\n✅ If a related task is found:\n\n- If the status of the existing task is done or 31 or 21 or  In Progress \n\nCall update_issues(status_id, id) — update the task status based on status_id.\n\nInform the user: \"✅ Task id updated (status: done).\"\n\n\n\n\nIf the status is to do or 11:\n\nInform the user: \"ℹ️ Task id not updated (status not done).\"\n\n➕ If no related task is found and the new status is to do:\nfill in this json parameter with description, summaries and duedate(// The duedate must be of the format \"yyyy-MM-dd\") if duedate is empty put this as value \"2025-06-09\" : \n{\n  \"fields\": {\n    \"assignee\": {\n      \"id\": \"712020:2252e3e4-1471-49e6-8bd2-00914e2036eb\"\n    },\n    \"summary\":\"\",\n    \"duedate\": \"\", // The duedate must be of the format \"yyyy-MM-dd\" and if duedate is empty put this as value \"2025-06-09\"\n    \"issuetype\": {\n      \"name\": \"Task\"\n    },\n    \"project\": {\n      \"id\":\"{{ $json.list[0].json.project_id}}\"\n    },\n    \"description\": {\n      \"content\": [\n        {\n          \"content\": [\n            {\n              \"text\": \"\",\n              \"type\": \"text\"\n            }\n          ],\n          \"type\": \"paragraph\"\n        }\n      ],\n      \"type\": \"doc\",\n      \"version\": 1\n    },\n    \"reporter\": {\n      \"id\": \"712020:2252e3e4-1471-49e6-8bd2-00914e2036eb\"\n    }\n}}\nCall create_issue(json) and send the json as parameter \n\nInform the user: \"🆕 New task created with description: new_action.\"\n\nIf the new action is identical or very similar to the existing one:\n\nSkip the update and notify: \"⏭️ No changes made to task id – content is similar.\"\n\n🧠 Final goal:\nAvoid redundant updates, only modify completed tasks or in progress tasks. Keep the Jira board accurate, clean, and up-to-date with minimal duplication.\n\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        4160,
        1460
      ],
      "id": "ac949026-542e-44f8-8884-8a281177aae7",
      "name": "follow_up_report",
      "executeOnce": false
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are JiraSync AI — an intelligent agent responsible for creating projects and creating and syncing task items into Jira.\n\nACTION:\nUse only the following tools:\n* create_project(project_name:string) // Creates a new Jira project\n\nCall it using:\n\n{\n  \"prject_name\":{{ $json.output.project_name }}\n  \"actions\":{{ $json.output.actions.toJsonString() }} ,\n}\nReturn only a clean JSON output confirming success or failure.\n\n🧠 AI Agent Logic: Project and Jira Issue Creation\n1- Create the Project\n\n   - Call: create_project(project_name)\n\n    - Capture the returned project id from the output of the create_project jira node .\n\n    - Ensure id is valid before proceeding.\n\n2- make sur the output is in plain json",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        2560,
        1980
      ],
      "id": "cac0f5df-2fc9-4c0f-81ee-8c618457bb43",
      "name": "initial_report"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "202ad09e-3571-48a9-a272-3a8d6f1f30fd",
              "leftValue": "={{ $json.output.status.toLowerCase() }}",
              "rightValue": "intermediary",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2040,
        1240
      ],
      "id": "eb3e2eb3-1c72-4dfc-b730-60815dde274a",
      "name": "If"
    },
    {
      "parameters": {
        "content": "",
        "height": 560,
        "width": 2480
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2260,
        1400
      ],
      "typeVersion": 1,
      "id": "4404277f-e305-4247-9ecb-dfbf24a2435d",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "",
        "height": 420,
        "width": 1540,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2260,
        1980
      ],
      "typeVersion": 1,
      "id": "4d1d215b-61d9-4685-8555-4ac40178b2f7",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "",
        "height": 420,
        "width": 1040,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2260,
        2420
      ],
      "typeVersion": 1,
      "id": "01a8c877-84e1-450c-9808-f862dcf1bae9",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "",
        "height": 1080,
        "width": 1620,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -420,
        360
      ],
      "typeVersion": 1,
      "id": "b1d12dbb-ace0-44f1-854f-723fa7c65479",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "",
        "height": 1080,
        "width": 1620,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1240,
        360
      ],
      "typeVersion": 1,
      "id": "63bbbac3-1ec7-4ed5-9418-ca0c9b16837f",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Read the following contract text: {{$json.choices[0].message.content}}\n\nYour tasks are:\n\n1- Identify and extract the following fields from the meeting content:\n{\n  \"project_name\": \"\",          // The name of the project discussed\n\"project_status\":\"\" // whether this is an initial meeting report or an intermediary meeting report where taks need to be updated (must be \"initial\" or \"intermediary\" )\n  \"start_date\":\"\", // the date of the report\n  \"actions\": [                 // List of concrete actions or tasks discussed\n    {\n      \"description\": \"\",       // Brief description of the task\n      \"status\":\"\",  // TO DO or IN PROGRESS or DONE\n      \"assigned_to\": \"\",       // Person responsible for the task\n      \"due_date\": \"\",          // Deadline or due date\n      \"notes\": \"\"              // Any additional information related to the task\n    }\n  ],\n  \"meeting_date\": \"\",          // The date when the meeting took place\n  \"general_notes\": \"\"          // Any general notes not linked to specific actions\n}\n2- Ensure that the output contains the json above only.\n\n3- If a meeting is scheduled (look for explicit time/date mention or title keywords like “next meeting”), note this separately so it can be synced to Teams or Calendar.\n\n4- Keep the formatting consistent for direct Jira and Teams integration.\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        1320,
        380
      ],
      "id": "705d1645-3205-43f8-b145-918d392d7da4",
      "name": "AI Agent2"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1300,
        540
      ],
      "id": "d1a83eb6-15f6-416c-9271-f32b5f72b522",
      "name": "OpenAI Chat Model5",
      "credentials": {
        "openAiApi": {
          "id": "dYZWfaOXMEhGY7FU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://rosiemt29.atlassian.net/rest/api/3/project",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Basic cm9zaWVtdDI5QGdtYWlsLmNvbTpBVEFUVDN4RmZHRjBnRDVnbUo5MDIwZWN4emRtZ19ycEozZmxLV3F6ZVBITXVaejB0YWZUdUhKVk1oaS1zT2xTT2tWTUN4d3VvbTM1bi1Ja2lJa182S0YyQWN2dENhSm52dWJLdWVpMHBUeGt6Y2drMXF0OENWUUQ4T0RwZzhMcmhQMnVGWVcxT214UndxYVF4eU8xRFF1c0xhaXVCeE1oSzhxWm5PQXpFZkVBeUVjTlJoTFRkVWs9RUI3MTUzNkI="
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "assigneeType",
              "value": "PROJECT_LEAD"
            },
            {
              "name": "leadAccountId",
              "value": "712020:5c0f38f5-a7d2-444d-ba9f-b8c9bcbfc4c1"
            },
            {
              "name": "projectTemplateKey",
              "value": "com.pyxis.greenhopper.jira:gh-simplified-agility-scrum"
            },
            {
              "name": "url",
              "value": "http://atlassian.com"
            },
            {
              "name": "projectTypeKey",
              "value": "software"
            },
            {
              "name": "name",
              "value": "={{ $json.output.project_name }}"
            },
            {
              "name": "key",
              "value": "={{ $json.output.project_name.toUpperCase().match(/\\b[A-Z]/g).join('').substring(0, 5)}}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        2720,
        2180
      ],
      "id": "2f2a708e-b4be-4f83-b48c-f1091bd717f2",
      "name": "create_project"
    },
    {
      "parameters": {
        "jsCode": "\nfunction normalizeAssignee(inputName) {\n  const name = inputName.toLowerCase();\n\n  const teamMap = [\n    {\n      aliases: [\"maram\", \"mara\", \"manom\", \"trabelsi\"],\n      jiraId: \"712020:2252e3e41471-49e6-8bd2-00914e2036eb\"\n    },\n    {\n      aliases: [\"iheb\", \"ihebih99\"],\n      jiraId: \"712020:90c222f1-6437-463b-ae70-9f3fc75d6cb6\"\n    },\n    {\n      aliases: [\"sonia\", \"gharsalli\"],\n      jiraId: \"615717bc9cdb9300724883d3\"\n    },\n    {\n      aliases: [\"engineering team\", \"iheb and manom\", \"iheb and maramm\"],\n      jiraIds: [\n        \"712020:90c222f1-6437-463b-ae70-9f3fc75d6cb6\",  // Iheb\n        \"712020:2252e3e41471-49e6-8bd2-00914e2036eb\"    // Maram\n      ]}\n  ];\n\n  for (const entry of teamMap) {\n    if (entry.aliases.some(alias => name.includes(alias))) {\n      return entry.jiraId || entry.jiraIds;\n    }\n  }\n\n  return inputName; // Return as-is if no match found\n}\n\n\nconst cleaned = $input.first().json.output.replace(/```json\\n?/, '').replace(/\\n```/, '').trim();\n\n\n  let project_id = JSON.parse(cleaned).project_id || JSON.parse(cleaned).projectID|| JSON.parse(cleaned).projectId;\n\n\nlet originalList = $input.last().json.output.actions;\n\nlet transformedList = originalList.map(item => ({\n  project_id: project_id,\n  description: `${item.due_date} - ${item.description} `,\n  summaries: item.summaries,\n  status:item.status,\n  due_date:item.due_date,\n  assigned_to : normalizeAssignee(item.assigned_to)\n}));\nreturn {transformedList};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3380,
        1980
      ],
      "id": "e46e9227-33bf-4789-9427-3bd93c42ef1c",
      "name": "Code"
    },
    {
      "parameters": {
        "fieldToSplitOut": "transformedList",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        3560,
        1980
      ],
      "id": "e52183ee-0997-49bb-b1b6-73e457f64865",
      "name": "Split Out"
    },
    {
      "parameters": {
        "batchSize": "={{ $('Merge1').last().json.output.actions.length}}",
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        3200,
        2180
      ],
      "id": "f32ce814-926a-4aa1-b151-d436c222bd39",
      "name": "Loop Over Items"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        3020,
        2000
      ],
      "id": "ec673533-9599-4188-9ffc-cedaca695b36",
      "name": "Merge1"
    },
    {
      "parameters": {
        "jsCode": "let id =$input.first().json.id ;\nlet actions = $input.last().json.output.actions;\n\nlet transformedList = actions.map(item => ({\n  project_id: id,\n  description: `${item.due_date} - ${item.description} `,\n  summaries: item.summaries,\n  status:item.status,\n  due_date:item.due_date,\n  assigned_to : item.assigned_to\n}));\nreturn {transformedList};\n\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3520,
        1540
      ],
      "id": "008e26ef-a0fc-48b5-bcfb-14f282171126",
      "name": "Code2"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        3380,
        1540
      ],
      "id": "5b0ea6ea-13c9-438c-960d-39f6cfd39720",
      "name": "Merge2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://rosiemt29.atlassian.net/rest/api/3/issue",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Basic cm9zaWVtdDI5QGdtYWlsLmNvbTpBVEFUVDN4RmZHRjBnRDVnbUo5MDIwZWN4emRtZ19ycEozZmxLV3F6ZVBITXVaejB0YWZUdUhKVk1oaS1zT2xTT2tWTUN4d3VvbTM1bi1Ja2lJa182S0YyQWN2dENhSm52dWJLdWVpMHBUeGt6Y2drMXF0OENWUUQ4T0RwZzhMcmhQMnVGWVcxT214UndxYVF4eU8xRFF1c0xhaXVCeE1oSzhxWm5PQXpFZkVBeUVjTlJoTFRkVWs9RUI3MTUzNkI="
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"fields\": {\n    \"assignee\": {\n      \"id\": \"712020:2252e3e4-1471-49e6-8bd2-00914e2036eb\"\n    },\n    \"summary\":\"{{ $json.summaries ? $json.summaries : $json.description }}\",\n    \"duedate\": \"{{ $json.due_date }}\",\n    \"issuetype\": {\n      \"name\": \"Task\"\n    },\n    \"project\": {\n      \"id\":\"{{ $json.project_id.toString() }}\"\n    },\n    \"description\": {\n      \"content\": [\n        {\n          \"content\": [\n            {\n              \"text\": \"{{ $json.description }}\",\n              \"type\": \"text\"\n            }\n          ],\n          \"type\": \"paragraph\"\n        }\n      ],\n      \"type\": \"doc\",\n      \"version\": 1\n    },\n    \"reporter\": {\n      \"id\": \"712020:2252e3e4-1471-49e6-8bd2-00914e2036eb\"\n    }\n}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        3400,
        2200
      ],
      "id": "21d69de9-7976-4f0c-b700-635d62546a5b",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://rosiemt29.atlassian.net/rest/api/3/issue",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "authorization",
              "value": "Basic cm9zaWVtdDI5QGdtYWlsLmNvbTpBVEFUVDN4RmZHRjBnRDVnbUo5MDIwZWN4emRtZ19ycEozZmxLV3F6ZVBITXVaejB0YWZUdUhKVk1oaS1zT2xTT2tWTUN4d3VvbTM1bi1Ja2lJa182S0YyQWN2dENhSm52dWJLdWVpMHBUeGt6Y2drMXF0OENWUUQ4T0RwZzhMcmhQMnVGWVcxT214UndxYVF4eU8xRFF1c0xhaXVCeE1oSzhxWm5PQXpFZkVBeUVjTlJoTFRkVWs9RUI3MTUzNkI="
            },
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('JSON', ``, 'json') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        4280,
        1700
      ],
      "id": "950417ed-df68-42d3-adbe-d98c5209653a",
      "name": "create_issue1"
    },
    {
      "parameters": {
        "content": "## Double check \n10(4 meeting reports) benchmark",
        "width": 520,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1640,
        180
      ],
      "typeVersion": 1,
      "id": "4dfd3618-a1ac-4cbc-b383-18a9d822a13f",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Compare the extracted JSON data to the original meeting notes. Only flag an issue if the extracted data introduces incorrect or missing information. Do not flag wording variations if the meaning remains accurate.\n\nSpecifically:\n\nAccept paraphrased task descriptions if they preserve the original intent.\n\nDo not require exact due dates unless the original explicitly provides one. Use empty or approximate values when the original is vague.\n\nA status of \"TO DO\" or \"IN PROGRESS\" should only be considered incorrect if the original clearly contradicts it.\n\nEnsure all tasks explicitly mentioned in the original notes are present in the JSON.\n\nFinally, if the extracted data matches the original intent and structure, return \"Validation Verdict: Valid\". If not, return \"Validation Verdict: Invalid\" followed by a list of only truly missing or inaccurate entries. If applicable, include a corrected version of the JSON block. \n\n\nextracted_data : {{ $('AI Agent2').item.json.output }}\noriginal_data : {{ $('Merge').item.json.choices[0].message.content }}",
        "options": {
          "systemMessage": "=You are a pragmatic AI validator tasked with checking if a JSON object correctly represents key information from a meeting report.\n\nYour goal is to confirm whether the JSON is structurally valid and **reasonably consistent** with the original input. Do not penalize the output for minor phrasing, paraphrasing, or missing optional details unless they materially affect understanding or task execution.\n\nBe concise and tolerant of slight textual differences. Focus only on structural compliance, logical alignment with the input, and clear semantic correctness.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1860,
        380
      ],
      "id": "478ec84b-32bd-480d-aaf5-09571c373936",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "gpt-4o"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1900,
        600
      ],
      "id": "1eaa9edb-709e-4018-82f9-e778610d6d4c",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "dYZWfaOXMEhGY7FU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.keys()\n}}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        2060,
        640
      ],
      "id": "9b1b22a9-a1d6-418d-a71b-56baa7e8e7d4",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "batchSize": 3,
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1640,
        380
      ],
      "id": "5c7873f4-db97-4028-b09b-ce04e161f60e",
      "name": "Loop Over Items1",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "8e967d8c-cb23-40cb-aa99-bd8c1a8840cf",
              "leftValue": "={{ $json.output.trim().includes('Invalid') }}",
              "rightValue": "Valid",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1620,
        660
      ],
      "id": "b0e5221d-846c-4390-858b-bfa907e960da",
      "name": "If1"
    },
    {
      "parameters": {
        "jsCode": "let actions = $input.first().json.transformedList; // If you're processing a JSON array\n\nlet transformedList = actions.map(item => {\n  // Normalize status\n  let newStatus;\n  switch (item.status?.toUpperCase()) {\n    case \"DONE\":\n      newStatus = 31;\n      break;\n    case \"IN PROGRESS\":\n      newStatus = 21;\n      break;\n    case \"TO DO\":\n      newStatus = 11;\n      break;\n    default:\n      newStatus = item.status;\n  }\n\n  // Copy description to summaries if empty\n  const summary = item.summaries?.trim() ? item.summaries : item.description;\n  \n\n  return {  project_id: item.project_id,\n    description: item.description,\n    summaries: summary,\n    status: newStatus,\n    due_date: item.due_date,\n    assigned_to: item.assigned_to   };\n});\n\nreturn transformedList.map(i => ({ json: i }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3680,
        1540
      ],
      "id": "d0001668-4ef1-40a6-96dc-04bb18ee973a",
      "name": "Code5"
    },
    {
      "parameters": {
        "url": "https://rosiemt29.atlassian.net/rest/api/3/project/search",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{\"Digital Marketing Campaign: Service Rebranding to (NimbusSync)\".replaceAll(/[^a-zA-Z\\s]/g,\"\").split(' ')}}"
            },
            {
              "name": "query",
              "value": "={{ $json.output.project_name }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "authorization",
              "value": "Basic cm9zaWVtdDI5QGdtYWlsLmNvbTpBVEFUVDN4RmZHRjBnRDVnbUo5MDIwZWN4emRtZ19ycEozZmxLV3F6ZVBITXVaejB0YWZUdUhKVk1oaS1zT2xTT2tWTUN4d3VvbTM1bi1Ja2lJa182S0YyQWN2dENhSm52dWJLdWVpMHBUeGt6Y2drMXF0OENWUUQ4T0RwZzhMcmhQMnVGWVcxT214UndxYVF4eU8xRFF1c0xhaXVCeE1oSzhxWm5PQXpFZkVBeUVjTlJoTFRkVWs9RUI3MTUzNkI="
            }
          ]
        },
        "options": {
          "queryParameterArrays": "brackets"
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2460,
        1500
      ],
      "id": "8310e5eb-4800-4c5e-b915-29e8da8bbdf1",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "fieldToSplitOut": "values",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2640,
        1500
      ],
      "id": "c1e6f5c0-d262-4ff0-904c-38692fe85c03",
      "name": "Split Out7"
    },
    {
      "parameters": {
        "fieldToSplitOut": "name, id",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2780,
        1500
      ],
      "id": "22132cee-666b-4f17-b361-52b46a607d22",
      "name": "Split Out8"
    },
    {
      "parameters": {
        "jsCode": "function normalize(name) {\n  return name\n    .replace(/[^a-zA-Z\\s]/g, '')\n    .toLowerCase()\n    .split(/\\s+/)\n    .sort()\n    .join(' ')\n    .trim();\n}\nconst inputName = $(\"Basic LLM Chain\").first().json.output.project_name;\nconst inputnamenorm = normalize(inputName);\nfor (const item of $input.all()) {\n  let n = normalize(item.json.name) ;\n  if (n === inputnamenorm){\n    let id = item.json.id;\n    let name = item.json.name;\n    return {id,name}\n  };\n}\nreturn { matched: false };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2920,
        1500
      ],
      "id": "c9ac4a75-9844-4ac8-8952-933dc17032f0",
      "name": "Code10"
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nlet list  = $input.all();\n\nreturn {list};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3820,
        1540
      ],
      "id": "39de8370-a1ba-4971-964a-6d74185fb001",
      "name": "Code4"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1580,
        1320
      ],
      "id": "34ee3e6e-fb12-48cc-864b-aa045372579b",
      "name": "Google Gemini Chat Model3",
      "credentials": {
        "googlePalmApi": {
          "id": "wlWExbBHelIHUbDo",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "content": "Ensure the data matches the original text :\n\n  - All key fields must be present and reflect the meeting content.\n  - Dates must be valid and formatted as YYYY-MM-DD.\n  - \"project_status\" should reflect the meeting context: either an initial planning meeting or a follow-up/intermediary one.\n  - Task assignments and statuses should be correct in general (don't penalize for exact phrases or vague due dates).\n  - For task \"status\": Must be one of \"TO DO\", \"IN PROGRESS\", or \"DONE\".  If \"project_status\" is \"initial\" and a task is marked \"IN PROGRESS\" when it would reasonably be \"TO DO\", do not flag this as an issue.\n  - Notes and descriptions should summarize relevant points, not match verbatim.\n  - Start_date is the meeting date the date of the report.\n  - even if assigned_to field of a task is empty return valid. \n \n\n3. If a future meeting is mentioned in the text (explicit date/time or \"next meeting\"), check that this was captured or reasonably inferred.",
        "height": 120,
        "width": 150
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1980,
        200
      ],
      "typeVersion": 1,
      "id": "e34e923d-b8e2-4920-a883-7ed5374d43a1",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "jsCode": "const text = $input.first().json.output;  // replace with your actual input key if needed\n\n// Use regex to extract the JSON block between ```json and ```\nconst match = text.match(/```json([\\s\\S]*?)```/); \n\nif (match && match[1]) {\n  try {\n    const jsonData = JSON.parse(match[1]);\n    return { json: jsonData };\n  } catch (err) {\n    return { json: { error: \"Invalid JSON format\" } };\n  }\n} else {\n  return { json: { error: \"No JSON block found in the text.\" } };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1960,
        780
      ],
      "id": "d1707bc8-63c2-4ae1-a4e8-08a613f9eda2",
      "name": "Code6"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "sendTo": "maramtrabelsi1212@gmail.com",
        "subject": "Approval Required",
        "message": "={{ $json.toJsonString() }}",
        "responseType": "customForm",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Report Confirmed ?",
              "fieldType": "textarea",
              "placeholder": "Confirmed",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2220,
        780
      ],
      "id": "bffd173d-1736-402f-9be8-47284c499ea9",
      "name": "Gmail1",
      "webhookId": "9362b96a-1edb-4b63-8d73-4e01e7ea3431",
      "credentials": {
        "gmailOAuth2": {
          "id": "LVLMq9zQvphbXDM9",
          "name": "Gmail account 9"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are ActionReview AI — a smart assistant specialized in reviewing and validating task items derived from project meeting minutes. Your role is to analyze the supervisor’s reply to a list of proposed action items, identify if any corrections are needed, and return the final validated action list — either as-is or with corrections applied.\n\n🔹 INPUTS\noriginal_actions: The list of action items extracted from the meeting. ({{ $('Code6').item.json.toJsonString() }})\n\nsupervisor_reply: The supervisor’s feedback. ({{ $json.data['Report Confirmed ?'] }})\n\n🔹 RULES\nAnalyze Supervisor Reply:\n\nIf the supervisor confirms the action list:\n  if the due_date is empty input {{ $today }} date as YYYY-MM-dd format then \n\nReturn original_actions.\n\nIf the supervisor requests changes:\n\nExtract corrections in this format:\n\n[\n  {\n    \"field_to_correct\": \"description\" | \"assigned_to\" | \"due_date\" | \"notes\",\n    \"original_value\": \"string\",\n    \"suggested_change\": \"string\",\n    \"reason\": \"optional string\"\n  }\n]\nApply Corrections:\n\nUpdate original_actions with the corrections.\n\nReturn the modified updated_actions.\n\n🔹 OUTPUT FORMAT\nOnly return the final actions as a json.\n{\n  \"project_name\" : \"\",\n  \"Status\":\"\",\n  \"actions\": [\n    {\"assigned_to\" : \"\",\n      \"due_date\" : \"\", #change the date format to yyyy-MM-dd\n      \"description\" : \"description\" \"assigned_to\" \"due_date\",\n      \"summaries\":\"notes\",\n      \"status\":\"\"\n    }\n  ]\n\"Scheduled meeting\": [\n\"meeting_date\":\"\",\n\"meeting_time\":\"\",\n\"meeting_subject\":\"\"\n]\n}\nNo status object. No commentary. No extra text.\nJust the final validated actions — corrected if needed, unchanged if confirmed.\n\n",
        "hasOutputParser": true
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        2460,
        740
      ],
      "id": "abdf1204-87b2-4c1b-b7a1-2dcfc46bbfe5",
      "name": "Basic LLM Chain1"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{  \"project_name\": \"AI Automation for Backlog Creation in Project Management\", \"status\" :\"initial meeting \",\"actions\": [    {     \"description\": \"Write meeting summaries with clear task assignments for each engineer\",      \"assigned_to\": \"Sonia\",      \"due_date\": \"25/05/2025\",      \"summaries\": \"Summaries should be detailed enough for AI processing; not overly technical\"   },  {      \"description\": \"Select OCR model for information extraction\", \"status\":\"TO DO\",     \"assigned_to\": \"Maram\",      \"due_date\": \"20/05/2025\",      \"summaries\": \"Applies to processing image-based summaries\"    }],\"Scheduled_meeting\": [\n{\"meeting_date\":\"\",\n\"meeting_time\":\"\",\n\"meeting_subject\":\"\"\n}]}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        2680,
        940
      ],
      "id": "625cf599-e399-49c2-ac2e-8009fe768d02",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        2480,
        980
      ],
      "id": "416e37e4-71d0-475a-abd2-3887dcb77bdc",
      "name": "Google Gemini Chat Model5",
      "credentials": {
        "googlePalmApi": {
          "id": "wlWExbBHelIHUbDo",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get only the text": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "GOT_OCR",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "DOCX to Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "AI Agent2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get only the text1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Get only the text2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "Get only the text1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Get only the text2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DOCX to Text": {
      "main": [
        [
          {
            "node": "Get only the text6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get only the text6": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "GOT_OCR": {
      "main": [
        [
          {
            "node": "Get only the text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          },
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar": {
      "ai_tool": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "initial_report",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "follow_up_report",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "get_all_issues_id": {
      "ai_tool": [
        [
          {
            "node": "follow_up_report",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "update_issues": {
      "ai_tool": [
        [
          {
            "node": "follow_up_report",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          },
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "initial_report",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "AI Agent2": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "create_project": {
      "ai_tool": [
        [
          {
            "node": "initial_report",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "initial_report": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "create_issue1": {
      "ai_tool": [
        [
          {
            "node": "follow_up_report",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Split Out7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out7": {
      "main": [
        [
          {
            "node": "Split Out8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out8": {
      "main": [
        [
          {
            "node": "Code10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code10": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "follow_up_report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Gmail1": {
      "main": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "Gmail1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          },
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1e09d37d-5ee9-43ef-9dcc-fe63b43a5b38",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "eda11f78dc41be1aa2e6362cde9ae6dd4b7bbe5c2c22874197c6fa1fa408e45b"
  },
  "id": "s0YTw9qKbyYJU6bK",
  "tags": []
}